
/**
  ******************************************************************************
  * @file    test_frag.h
  * @author  IMCv2 Team
  * @brief   Module for handling NC-SI Ethernet packet fragmentation and 
  *          transmission via MCTP and USB.
  * 
  * This module is responsible for receiving NC-SI Ethernet packets, 
  * fragmenting them into MCTP-compliant messages, and transmitting these 
  * fragments over USB. The process involves adjusting fragment pointers, 
  * managing payload sizes, and ensuring that the fragments are correctly 
  * structured with MCTP headers. The module is optimized for high-frequency 
  * execution and minimal overhead.
  * 
  * The typical flow of this module includes:
  * - Receiving an NC-SI Ethernet packet.
  * - Adjusting fragment pointers to align with the packet data.
  * - Preparing MCTP headers and payloads for each fragment.
  * - Transmitting the fragments in batches over USB, respecting the 
  *   hardware's ability to handle up to 4 fragments at a time.
  * 
  ******************************************************************************
  * @attention
  * 
  * @copyright
  * @par Copyright (c) 2024 Intel Corporation.
  * All rights reserved.
  * 
  * This code is proprietary to Intel Corporation and may not be used, modified,
  * or distributed without the express written permission of Intel Corporation.
  * 
  ******************************************************************************
  */


/* Define to prevent recursive inclusion -------------------------------------*/

#ifndef _TEST_FRAG_H_
#define _TEST_FRAG_H_

#include <stdint.h>

/*
 * Generic pointer / length structutre.
 */

typedef struct ptr_size_pair_t
{
    uintptr_t ptr;  /* Pointer stored as an unsigned integer type. */
    size_t    size; /* Size associated with the pointer. */

} ptr_size_pair;

/* USB Tx callback handler */
typedef void (*cb_on_usb_tx)(ptr_size_pair *pairs, size_t pairs_count);

/**
 * @brief Performs the fragments test by processing and transmitting NC-SI 
 *        packet fragments.
 * @param arg - per step.
 */

int   test_frag_epilog(uintptr_t arg);
void  test_exec_frag(uintptr_t arg);
int   test_frag_prologue(uintptr_t arg);
char *test_frag_desc(size_t description_type);
int   test_frag_init(uintptr_t arg);


#endif /* #define _TEST_FRAG_H_
 */